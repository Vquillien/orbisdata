/**
 * OrbisGIS is a java GIS application dedicated to research in GIScience.
 * OrbisGIS is developed by the GIS group of the DECIDE team of the
 * Lab-STICC CNRS laboratory, see <http://www.lab-sticc.fr/>.
 *
 * The GIS group of the DECIDE team is located at :
 *
 * Laboratoire Lab-STICC – CNRS UMR 6285
 * Equipe DECIDE
 * UNIVERSITÉ DE BRETAGNE-SUD
 * Institut Universitaire de Technologie de Vannes
 * 8, Rue Montaigne - BP 561 56017 Vannes Cedex
 *
 * OrbisGIS is distributed under GPL 3 license.
 *
 * Copyright (C) 2015-2017 CNRS (Lab-STICC UMR CNRS 6285)
 *
 * This file is part of OrbisGIS.
 *
 * OrbisGIS is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * OrbisGIS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * OrbisGIS. If not, see <http://www.gnu.org/licenses/>.
 *
 * For more information, please consult: <http://www.orbisgis.org/>
 * or contact directly:
 * info_at_ orbisgis.org
 */
package org.orbisgis.orbisdata.filter.fes_2_0_2;

import net.opengis.fes._2_0_2.*;

import javax.xml.bind.JAXBElement;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * This class change a String of SQL parameter in an object JaxB.
 * @Author Vincent QUILLIEN
 */
public class SqlToFes {

    /**
     * This method take an object generated by JaxB from a xml file and give un return the SQL parameter.
     *
     * @param objectFromFilterSQL
     * @return The XML object
     */
    public static Object sqlToXml(Object objectFromFilterSQL) {
        ObjectFactory factory = new ObjectFactory();
        JAXBElement returnXml = null;
        JAXBElement<FilterType> filterElement = null;
        JAXBElement<SortByType> sortByElement = null;
        if (objectFromFilterSQL != null) {
            if (objectFromFilterSQL instanceof String) {
                //test the structure of the Object
                Pattern FilterWhere = Pattern.compile("(WHERE).*|(ORDER BY)[\\w,( )]*");
                String sqlObject = new String((String) objectFromFilterSQL);
                Matcher m = FilterWhere.matcher(sqlObject);
                if(m.matches()) {

                    if (sqlObject.startsWith("WHERE")) {
                        String parameter = sqlObject.substring(5).trim();
                        FilterType filter = createFilter(parameter);
                        filterElement = factory.createFilter(filter);
                        returnXml = filterElement;

                    } else {
                        String parameter = sqlObject.substring(8).trim();
                        String[] parameterSortProperty = parameter.split(", ");

                        SortByType sortBy = factory.createSortByType();
                        for (int i = 0; i < parameterSortProperty.length; i++) {
                            SortPropertyType sortProperty = factory.createSortPropertyType();
                            String[] elements = parameterSortProperty[i].split(" ");
                            sortProperty.setValueReference(elements[0].trim());
                            if (elements.length > 1) {
                                sortProperty.setSortOrder(SortOrderType.fromValue(elements[1].trim()));
                            }
                            sortBy.getSortProperty().add(sortProperty);
                        }

                        sortByElement = factory.createSortBy(sortBy);
                        returnXml = sortByElement;
                    }
                }
            }
        }
    return returnXml;
    }

    private static FilterType createFilter(String requestWhere) {
        FilterType filterElement = null;
        Pattern FilterComparison = Pattern.compile("[\\w,( )]+ (LIKE|BETWEEN|IS NULL|<|>|>=|<=|!=|=)[\\w,( )%]+");
        Matcher matcherComparison = FilterComparison.matcher(requestWhere);

        if(matcherComparison.matches()) {
            String[] listParam = requestWhere.split();
        }
        return filterElement ;
    }
}
